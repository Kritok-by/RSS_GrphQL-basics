type Artist {
    id: ID!
    firstName: String!
    secondName: String!
    middleName: String
    birthDate: String
    birthPlace: String
    country: String!
    bands: [ID]
    instruments: [String]
}

input ArtistInput {
    id: ID
    firstName: String!
    secondName: String!
    middleName: String
    birthDate: String
    birthPlace: String
    country: String!
    bands: [ID]
    instruments: [String]
}

type Artists {
    items: [Artist]!
    limit: Int!
    offset: Int!
    total: Int!
}

type Query {
    artists(limit: Int, offset: Int, filter: String): Artists,
    artist(_id: ID!): Artist

}


extend type Mutation {
  createArtist(firstName: String!,secondName: String!, country: String!): Artist,
  updateArtist(id: ID!, args: ArtistInput): Artist
  deleteArtist(id: ID!): DeleteResponse
}